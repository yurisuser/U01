Обьект - галактика.
Галактика включает в себя звездные системы и аномалии.
искуственные - корабли, станции, спутники, обломки, аномалии, всякие запущеные с кораблей ракеты и зонды.
//-----------------------------------------------------------------------------
звездные системы состоят из природных - звезды/звезд и планетных систем. и астероидных поясов.
Планетные системы имеют центральную планету и планетарные спутники, астероидные пояса (кольца).
Звезды имеют цвет, массу, температуру, внешний вид (например нейтронные или черные дыры)
Планеты имеют номер субзвездной орбиты, позицию по орбите, тип планеты, массу, атмосферу, полезные ресурсы.
Планетарные спутники имеют номер орбиты(субпланетной), и остальное, как и планеты. по сути наследуют от планет.
//-----------------------------------------------------------------------------
Корабли имеют всякие параметры, список оборудования, груза, экипаж. ЗАДАНИЯ (я хз как, но надо чтоб они там летали, торговали, воевали и тд)
//-----------------------------------------------------------------------------
Исскуственные обьекты могут быть на карте галактики, карте звездной системы, карте планетарно системы.

ВАЖНО!!!! все здесь лишь рекомендации. При обнаружении лучшего решения приоретет нового решения над рекомендацией!!!!
-----------------------------------------------------------------------------


ниже — «скелет» архитектуры, без кода. Он масштабируется от меню до тысяч объектов и не завязан на конкретную реализацию (Unity/другое). Если ты в Unity — просто подставишь ScriptableObject/Prefab там, где я пишу «данные/ресурсы».

1) Слои симуляции и уровни детальности (LOD)

Три “масштаба”:

Галактика (Galaxy Layer) — узлы = звёздные системы, крупные аномалии, маршруты. Физики нет; всё по упрощённым уравнениям и расписаниям. Тики редкие (раз в N секунд).

Звёздная система (System Layer) — орбитальная механика (упрощённая Кеплер/2-body), активные объекты: корабли, станции, астероидные пояса, аномалии. Тики чаще.

Планетарная система/Орбита планеты (Planet Layer) — то же, но с фокусом на спутниках/кольцах/низких орбитах. Самый частый тик.

Правило LOD: в фокусе игрока — “высокая” симуляция; вне фокуса — событийная (агрегированная) симуляция. Один и тот же объект имеет один runtime-идентификатор, но разные прокси-представления на каждом слое.

2) Модель данных: что хранится и кто владелец
Базовые сущности (runtime)

Galaxy

StarSystems[], Anomalies[], навигационные узлы/маршруты.

StarSystem

Stars[] (с классами/цветом/массой/типом), PlanetSystems[], Belts[], Anomalies[], Artificial[].

PlanetSystem

CentralPlanet, Moons[], Rings[].

ArtificialObject (базовый класс/заголовок)

подтипы: Ship, Station, Satellite, Debris, Probe, Missile.

NaturalObject (базовый заголовок)

Star, Planet, Moon, AsteroidBelt, Ring.

Общие поля

Identity: стабильный GUID и тип (для сохранения, ссылок, сетки).

Transform в иерархии орбит: не мировые XYZ, а орбитальные элементы (Kepler: a, e, i, Ω, ω, M0) + родительская опорная система координат (звезда/планета). Для кораблей — «орбитальный слот» + модификатор манёвра.

Ownership/Фракция (для ИИ/отношений).

Traits/Components (см. ниже).

Дефиниции (статические данные)

StarDef, PlanetDef, ShipHullDef, StationDef, WeaponDef, ResourceDef, AnomalyDef, MissionDef.
Хранятся как ScriptableObject/JSON. Рантайм-экземпляры ссылаются на эти дефы.

3) Компонентная модель (композиция вместо наследования)

Вместо глубокого наследования — составные компоненты (ECS-образно или просто композиция):

OrbitComponent — орбитальные элементы, расчёт позиции во времени.

PhysicsProxy — если нужна локальная физика (стыковка, коллизии) в ближнем LOD.

CargoComponent — инвентарь, ресурсы, масса.

EquipmentComponent — слоты, модули, износ, потребление энергии.

CrewComponent — экипаж/перки/мораль.

CombatComponent — вооружение, щиты, ХП отсеков.

ScannerComponent — сенсоры/сигнатура/обнаружение.

AIComponent — текущее состояние ИИ (см. §5).

MissionComponent — активные задания/цели/контракты.

AnomalyComponent — поведение аномалии (поля, эффекты, триггеры).

Ownership/FactionComponent — фракция, репутация, отношения.

MapProxy — ссылки на визуальные представления на каждом слое (иконка на галкарте, маркер в системе, полноценный префаб в орбите).

Компоненты легко отключать в дальних LOD, оставляя только Orbit + AI расписание.

4) Системы (Services) — логика, а не объекты

TimeService — единый “game time”, скоростные режимы, пауза, синхронизация слоёв.

OrbitSystem — обновляет все OrbitComponent (аналитика Кеплера, без n-body).

Navigation/PathfindingSystem — маршруты между системами (стратегически) и манёвры внутри системы (простейшие гомановские/импульсные).

AISystem — тики ИИ (см. §5).

EconomySystem — рынки, спрос/предложение, генерация торговых задач.

CombatSystem — разрешение боёв (в “агрегированном” виде вне фокуса, детально — в фокусе).

Spawner/DespawnSystem — подгрузка/выгрузка визуальных прокси и тяжёлых компонентов при смене LOD/сцен.

EventBus — шина событий (добыча, бой, обнаружение, стыковка, квестовые триггеры).

PersistenceService — сохранение/загрузка: сериализует только состояние компонентов + ссылки на дефы.

Discovery/ScanSystem — туман войны, карты, сигнатуры.

SceneService — загрузка/переключение слоёв/сцен, привязка камеры/инпута.

5) ИИ: задачи, цели, расписания

Модель “задач” (Jobs/Tasks):

Базовый Task: имеет цель (точку/объект), пред-/пост-условия, параметры.

Примеры: TradeRouteTask, MineAsteroidsTask, PatrolTask, EscortTask, AttackTask, ExploreTask, DockTask, RefuelTask.

Scheduler назначает задачи кораблям/флотам из GoalProviders (экономика, фракционные войны, контракты игрока).

На низком LOD задачи исполняются дискретно/событийно (например, “через 120 c корабль прилетит и продаст руду”). В фокусе — посекундные манёвры.

Навигация в системе: импульсные манёвры по орбитальным дугам (без тяжёлой физики). На дальних расстояниях — “телепортация по расписанию” (с предсказуемой задержкой) с валидацией коллизий только у целевых зон.

6) Аномалии и искусственные объекты

Аномалии = AnomalyComponent + поведение:

поля, которые влияют на орбиту/сенсоры/связь;

триггеры событий (спаун пиратов, “потеря связи”, псевдо-гравитация);

могут жить на любом слое (галактика/система/орбита) с разной детализацией.

Искусственные: корабли/станции/спутники/обломки/ракеты/зонды — всё через ArtificialObject + набор компонентов. Мелкие (ракеты/зонды) появляются только в ближнем LOD, в дальнем — абстрагируются до событий урона/сканирования.

7) Представления и сцены

Один runtime-объект ⇄ несколько представлений:
иконка на галкарте, упрощённый маркер в системе, полноценный корабль с эффектами в орбите. Управляет MapProxy + Spawner.

Сцены: GalaxyScene (UI/стратегия), SystemScene (орбитальная карта), OrbitScene/“тактическая зона” (боёвка/стыковка).
Все сцены читают/изменяют один и тот же runtime-мир (сервисный слой в DontDestroyOnLoad/Core).

Сортировка UI: глобальный дебаг/оверлеи — отдельный Overlay Canvas с высоким sortingOrder.

8) Время, производительность, стабильность

Единый time-scale с “делителями” на слоях: галактика тикает раз в 1–5 с, система — 10–20 мс, орбита — каждый кадр.

Job/Task batching: тик ИИ/экономики пачками, чтобы не было спайков.

Детерминизм не обязателен, если не нужен мультиплеер; важна идемпотентность событий (переприменение безопасно).

Spatial partitioning: простая сетка/ячейки по системе для быстрых запросов ближайших объектов и видимости.

9) Сохранение/загрузка

Сохраняем состояние компонентов + ID + версию формата.

Дифф-сейвы (опционально): периодические снапшоты мира + лог событий между ними.

Восстановление мира — создание сущностей из дефов, затем накат состояния.

10) Расширяемость и “куда впаивать фичи”

Новые классы объектов = новый набор компонентов (или поведение у Anomaly/Artificial).

Новые типы задач = новый Task + адаптер в AISystem.

Экономика: отдельные провайдеры цен/контрактов, событийные “рынки” у станций/планет.

Боёвка: CombatSystem переключает режим LOD; в дальнем — формулы (DPS/TTK), в ближнем — снаряды/щиты.

Мини-чек-лист реализации (чтобы начать)

Core (неубиваемый): TimeService, SceneService, OrbitSystem, AISystem, EventBus, Persistence.

Дефы: звёзды/планеты/корабли/станции/ресурсы — ScriptableObjects.

Генератор галактики → создаёт Galaxy (runtime) и 1–2 системы.

Spawner для Proxy-представлений на каждом слое.

OrbitComponent для всех натуральных/искусственных объектов.

Input/Camera для смены слоёв (галактика ↔ система ↔ орбита).

Примитивный AI: PatrolTask/TradeTask по расписанию на дальнем LOD.