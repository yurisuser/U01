Что довести до скелета

Собрать RuntimeWorld‑сервис (DontDestroyOnLoad) с реестрами галактики, систем, флотов, задач и ссылкой на владение (UID → EntityHandle), 
а в GameStateService оставить только view‑снапшоты для UI.
Расширить Simulation/Executor до пайплайна шагов (Inputs → Perception → AI → Movement → Events → Snapshot) и подключить 
туда Director, Motivator, SpawnPlanner/Spawner, храня ссылки на мир.
Закрыть цикл выбора системы: при клике писать в RuntimeWorld активную систему, а SystemMap читать сущности и отдавать их 
слоям (корабли, станции, орбиты) через интерфейсы ISystemMapLayer.
Добавить минимальные ScriptableObject‑дефы (звезда, планета, корабль, станция, ресурс) и фабрики, чтобы генераторы опирались на 
конфигурацию, а не на хардкод.
Реализовать базовый EventBus + очередь UI‑апдейтов (например, панель времени, подсказки, счетчик тиков), чтобы проверять симуляцию без отладки.

Как углубляться

Ввести многослойное LOD: галактика считает события пачками (шаги ≥1 c), система — орбитальные аппроксимации, орбита — покадровые манёвры; 
переключение по фокусу игрока.
Добавить Task/Order модель (патроли, торговля, разведка): Motivator генерирует цели, Director раскладывает на директивы, Executor
обновляет агентское состояние.

Минимальная структура PilotMotiv (всё хранится внутри мотива, без лишних полей):

PilotMotiv
├─ Mission
│  ├─ Kind — тип корневой задачи (Patrol, TradeRoute и т.п.).
│  └─ Params — конкретные параметры миссии (товар, системы, радиус и т.д.).
└─ Execution
   └─ TaskStack : Stack<TaskFrame>
      └─ TaskFrame
         ├─ TaskKind — атомарная задача, которая выполняется сейчас.
         └─ Payload — данные для возобновления (цель, прогресс, ссылки на объекты).

Utility AI только выбирает, что положить на вершину TaskStack (Push/Replace), сам мотив хранит стек и параметры.
Развивать фракции: репутация (Trust/Utility из idea.txt), бюджет, территориальные интересы, генерация конфликтов и реакций на действия игрока.
Укрепить экономику: ресурсы планет → контракты станций → грузовые маршруты, с дифференцированной симуляцией на дальнем и ближнем слоях.
Подготовить события и аномалии: компоненты с эффектами (глушение сенсоров, спавн пиратов), связанные с расписанием и рисками для маршрутов.
Дальше

Сначала реализовать RuntimeWorld и расширенный Executor плюс отрисовку кораблей на SystemMap — это даст наблюдаемый скелет.
Затем включить хотя бы один цикл задач (например, автоматический патруль) и отладочные окна (лог тиков, состояние фракций) для проверки глубины.
После этого можно браться за экономику/анализ, боевые сценарии и переход к орбитальной сцене.